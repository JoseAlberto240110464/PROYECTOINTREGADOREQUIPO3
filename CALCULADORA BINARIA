import java.util.Scanner;
import java.math.BigInteger;
public class Proyectointegrador24 {

    public static void main(String[] args) {
        Scanner leer = new Scanner(System.in);
        String binario1, binario2;

        // Solicitar el primer número binario
        binario1 = solicitarNumeroBinario(leer, "Introduce el primer número binario: ");

        // Solicitar el segundo número binario
        binario2 = solicitarNumeroBinario(leer, "Introduce el segundo número binario: ");

        // Sumar binarios
        String suma = sumaBinaria(binario1, binario2);
        System.out.println("Resultado de la suma: " + suma);

        // Restar binarios (si el primer número es mayor o igual al segundo)
        if (esMayorOIgual(binario1, binario2)) {
            String resta = restaBinaria(binario1, binario2);
            System.out.println("Resultado de la resta: " + resta);
        } else {
            System.out.println("No se puede realizar la resta: el primer número debe ser mayor o igual que el segundo.");
        }

        // Multiplicar binarios
        String multiplicacion = multiplicacionBinaria(binario1, binario2);
        System.out.println("Resultado de la multiplicación: " + multiplicacion);

        // Dividir binarios (si el segundo número no es cero)
        if (!binario2.equals("0")) {
            String division = divisionBinaria(binario1, binario2);
            System.out.println("Resultado de la división: " + division);
        } else {
            System.out.println("Error: División por cero");
        }
    }

    // Método para solicitar un número binario y validar la entrada
    public static String solicitarNumeroBinario(Scanner leer, String mensaje) {
        String binario;
        while (true) {
            System.out.print(mensaje);
            binario = leer.nextLine();
            if (binario.matches("[01]+")) { // Verifica que solo contenga '0' y '1'
                return binario;
            } else {
                System.out.println("Entrada inválida. Por favor, introduce un número binario (solo 0s y 1s).");
            }
        }
    }

    // Método para sumar dos números binarios
    public static String sumaBinaria(String bin1, String bin2) {
        int maxLen = Math.max(bin1.length(), bin2.length());
        bin1 = agregarCeros(bin1, maxLen);
        bin2 = agregarCeros(bin2, maxLen);

        StringBuilder resultado = new StringBuilder();
        int acarreo = 0;

        for (int i = maxLen - 1; i >= 0; i--) {
            int bit1 = bin1.charAt(i) - '0';
            int bit2 = bin2.charAt(i) - '0';

            int suma = bit1 + bit2 + acarreo;
            resultado.insert(0, suma % 2); // Agregar el bit resultante
            acarreo = suma / 2; // Calcular el acarreo
        }

        if (acarreo != 0) {
            resultado.insert(0, '1'); // Agregar acarreo si es necesario
        }

        return resultado.toString();
    }

    // Método para restar dos números binarios
    public static String restaBinaria(String bin1, String bin2) {
        int maxLen = Math.max(bin1.length(), bin2.length());
        bin1 = agregarCeros(bin1, maxLen);
        bin2 = agregarCeros(bin2, maxLen);

        StringBuilder resultado = new StringBuilder();
        int prestado = 0;

        for (int i = maxLen - 1; i >= 0; i--) {
            int bit1 = bin1.charAt(i) - '0';
            int bit2 = bin2.charAt(i) - '0';

            int resta = bit1 - bit2 - prestado;
            if (resta < 0) {
                resta += 2; // Tomar prestado
                prestado = 1;
            } else {
                prestado = 0;
            }
            resultado.insert(0, resta);
        }

        // Eliminar ceros a la izquierda
        while (resultado.length() > 1 && resultado.charAt(0) == '0') {
            resultado.deleteCharAt(0);
        }

        return resultado.toString();
    }

    // Método para multiplicar dos números binarios
    public static String multiplicacionBinaria(String bin1, String bin2) {
        BigInteger decimal1 = new BigInteger(bin1, 2);
        BigInteger decimal2 = new BigInteger(bin2, 2);
        BigInteger productoDecimal = decimal1.multiply(decimal2);
        return productoDecimal.toString(2); // Convertir de vuelta a binario
    }

    // Método para dividir dos números binarios
    public static String divisionBinaria(String bin1, String bin2) {
        BigInteger decimal1 = new BigInteger(bin1, 2);
        BigInteger decimal2 = new BigInteger(bin2, 2);
        if (decimal2.equals(BigInteger.ZERO)) {
            return "Error: División por cero";
        }
        BigInteger cocienteDecimal = decimal1.divide(decimal2);
        return cocienteDecimal.toString(2); // Convertir de vuelta a binario
    }

    // Método para asegurarse de que las cadenas binarias tengan la misma longitud
    public static String agregarCeros(String bin, int longitud) {
        StringBuilder sb = new StringBuilder(bin);
        while (sb.length() < longitud) {
            sb.insert(0, '0');
        }
        return sb.toString();
    }

    // Método para verificar si el primer número binario es mayor o igual que el segundo
    public static boolean esMayorOIgual(String bin1, String bin2) {
        int maxLen = Math.max(bin1.length(), bin2.length());
        bin1 = agregarCeros(bin1, maxLen);
        bin2 = agregarCeros(bin2, maxLen);
        return bin1.compareTo(bin2) >= 0;
    }
}
